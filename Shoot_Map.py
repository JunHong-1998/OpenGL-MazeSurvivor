import pygame
from OpenGL.GL import *

class Build:
    def construct(self, maze, route):
        w,h,d = 4,4,4
        surf = [(5,6,2,1),(7,4,0,3),(6,7,3,2),(4,5,1,0)]
        tex = [(1,1),(0,1), (0,0), (1,0)]
        self.mazebuild = glGenLists(1)
        glNewList(self.mazebuild, GL_COMPILE)
        glFrontFace(GL_CCW)
        glColor3f(1,1,1)
        self.loadTex("External/mapwall.png")
        for m in maze:
            for mm in range(m[2]):
                for mmm in range(m[3]):
                    vtx = [(m[1] * w+mm*w, - m[0] * h-mmm*h, 0), (m[1] * w + w * (mm+1), - m[0] * h-mmm*h, 0), (m[1] * w + w * (mm+1), - m[0] * h - h * (mmm+1), 0), (m[1] * w+mm*w, - m[0] * h - h * (mmm+1), 0),
                           (m[1] * w+mm*w, - m[0] * h-mmm*h, d), (m[1] * w + w * (mm+1), - m[0] * h-mmm*h, d), (m[1] * w + w * (mm+1), - m[0] * h - h * (mmm+1), d), (m[1] * w+mm*w, - m[0] * h - h * (mmm+1), d)]
                    glEnable(GL_TEXTURE_2D)
                    glBindTexture(GL_TEXTURE_2D, self.texID)
                    glBegin(GL_QUADS)
                    for surface in surf:
                        n = 0
                        for vertex in surface:
                            glTexCoord2fv(tex[n])
                            glVertex3fv(vtx[vertex])
                            n+=1
                    glEnd()
        surf = [(1,0,3,2)]
        self.loadTex("External/mapfloor.png")
        for r in route:
            for rr in range(r[2]):
                for rrr in range(r[3]):
                    vtx = [(r[1] * w+rr*w, - r[0] * h-rrr*h, 0), (r[1] * w + w * (rr+1), - r[0] * h-rrr*h, 0), (r[1] * w + w * (rr+1), - r[0] * h - h * (rrr+1), 0), (r[1] * w+rr*w, - r[0] * h - h * (rrr+1), 0)]
                    glEnable(GL_TEXTURE_2D)
                    glBindTexture(GL_TEXTURE_2D, self.texID)
                    glBegin(GL_QUADS)
                    for surface in surf:
                        n = 0
                        for vertex in surface:
                            glTexCoord2fv(tex[n])
                            glVertex3fv(vtx[vertex])
                            n+=1
                    glEnd()
        glDisable(GL_TEXTURE_2D)
        glEndList()

    def loadTex(self, file):
        surf = pygame.image.load(file)
        image = pygame.image.tostring(surf, 'RGBA', 1)
        ix, iy = surf.get_rect().size
        texid = self.texID = glGenTextures(1)
        glBindTexture(GL_TEXTURE_2D, texid)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, ix, iy, 0, GL_RGBA, GL_UNSIGNED_BYTE, image)

builder = Build()
class Map:

    def __init__(self):
        self.lvl = 1
        self.pos = [-50,50,0]
        self.route = []

    def mazeUPDATE(self):
        maze, route = [], []
        self.route = []
        w, h = 4, 4
        if self.lvl==1:
            maze = [(0,0,1,13), (15,0,1,10), (0,1,23,1), (12,1,2,1), (15,1,3,1), (21,1,6,1), (24,1,23,1), (1,3,1,6), (10,3,1,3), (18,3,6,1), (19,3,1,2), (6,4,2,1),
                    (3,6,3,1), (6,6,1,4), (12,6,6,1), (13,6,1,3), (3,9,1,7), (13,9,1,9), (6,10,2,1), (1,12,1,3), (6,12,1,7), (15,12,6,1), (16,12,1,2), (18,12,4,1), (21,12,7,1), (22,12,1,2),
                    (3,15,1,10), (3,16,6,1), (6,16,3,1), (12,16,2,1), (9,18,7,1), (12,18,1,4), (18,18,4,1), (4,21,1,3), (12,21,4,1), (13,21,1,3), (19,21,1,5), (6,22,2,1), (0,24,1,9), (13,24,1,12)]
            route = [(13, 0, 4, 2), (1, 1, 2, 11), (16, 1, 2, 5), (22, 1, 6, 2), (7, 3, 3, 3), (10, 4, 2, 6), (16, 3, 4, 2), (1, 4, 8, 2), (3, 4, 2, 3), (19, 4, 5, 2), (4, 6, 3, 2), (10, 6, 6, 2), (6, 7, 2, 4),
                     (13, 7, 2, 5), (21, 7, 2, 3), (3, 10, 2, 3), (7, 10, 2, 3), (13, 10, 2, 9), (22, 9, 3, 2), (4, 12, 3, 2), (13, 12, 6, 2), (19, 12, 4, 2), (1, 13, 2, 3), (6, 13, 2, 7), (16, 13, 3, 2), (22, 13, 6, 2),
                     (1, 15, 9, 2), (4, 16, 3, 2), (7, 16, 8, 2), (9, 16, 2, 3), (16, 16, 2, 5), (4, 19, 2, 3), (10, 18, 7, 2), (16, 18, 4, 2), (19, 18, 3, 2), (12, 19, 2, 4), (21, 19, 2, 3), (3, 22, 2, 3), (13, 22, 2, 11)]
            self.pos = [-50, 50, 0]
        elif self.lvl == 2:
            maze = [(0,0,1,16), (18,0,1,13), (0,1,29,1), (6,1,2,1), (15,1,3,1), (18,1,3,1), (30,1,29,1), (3,3,1,6), (9,3,7,1), (12,3,1,3), (19,3,1,2), (21,3,4,1), (24,3,1,6),
                         (1,6,1,6), (10,6,1,9), (22,6,1,3), (27,6,7,1), (18,7,3,1), (3,9,10,1), (6,9,6,1), (10,9,1,6), (19,9,1,8), (7,12,1,6), (15,12,1,7), (24,12,1,3), (21,13,2,1), (24,13,2,1),
                         (6,15,1,13), (21,15,1,4), (27,15,4,1), (28,15,1,2), (9,16,3,1), (15,16,3,1), (4,18,1,2), (6,18,7,1), (12,18,4,1), (16,18,1,9), (21,19,6,1), (1,21,1,2), (3,21,4,1), (9,21,7,1), (13,21,1,6), (24,21,1,6),
                         (18,22,5,1), (27,22,2,1), (4,24,1,2), (12,24,7,1), (13,24,1,3), (22,24,1,6), (24,25,3,1), (1,27,1,8), (15,27,4,1), (18,27,1,6), (27,27,3,1), (0,30,1,12), (16,30,1,15)]
            route = [(16, 0, 4, 2), (1, 1, 5, 2), (3, 1, 2, 3), (7, 1, 2, 8), (19, 1, 2, 11), (10, 3, 3, 2), (22, 3, 3, 2), (3, 4, 2, 6), (12, 4, 2, 9), (24, 4, 2, 6), (7, 6, 6, 2), (19, 6, 3, 2), (25, 6,3, 2), (28, 6, 9, 2),
                     (1, 7, 14, 2), (3, 7, 2, 4), (10, 7, 2, 6), (16, 7, 3, 2), (21, 7, 2, 4), (4, 9, 9, 2), (9, 10, 2, 4), (13, 10, 3, 2), (15, 10, 2, 12), (22, 12, 3, 2), (7, 13, 2, 12), (19, 13, 3, 2), (25, 13, 2, 3), (25, 15, 4, 2),
                     (6, 16, 2, 3), (10, 16, 3, 2), (12, 16, 2, 3), (16, 16, 2, 9), (28, 16, 5, 2), (7, 18, 9, 2), (13, 18, 3, 2), (3, 19, 2, 3), (9, 19, 2, 3), (15, 19, 2, 6), (22, 19, 5, 2), (24, 19, 2, 4), (4, 21, 3, 2), (10, 21, 9, 2), (19, 21, 6, 2),
                     (1, 22, 5, 2), (12, 22, 2, 4), (16, 22, 8, 2), (24, 22, 2, 3), (28, 22, 8, 2), (3, 25, 2, 4), (13, 25, 2, 3), (21, 25, 2, 3), (25, 25, 2, 3), (13, 27, 4, 2), (25, 27, 3, 2), (1, 28, 2, 9), (18, 28, 2, 7)]
            self.pos = [-62, 62, 0]
        elif self.lvl ==3:
            maze = [(0,0,1,18), (18,0,4,1), (21,0,4,1), (22,0,1,15), (0,1,35,1), (6,1,3,1), (27,1,3,1), (36,1,35,1), (3,3,1,3), (9,3,7,1), (12,3,7,1), (15,3,1,3), (24,3,10,1), (28,3,1,2), (30,3,4,1), (33,3,10,1),
                         (3,6,4,1), (4,6,1,5), (13,6,1,11), (25,6,1,5), (18,7,5,1), (1,9,1,2), (6,9,4,1), (13,9,1,3), (21,9,7,1), (22,9,1,2), (27,9,6,1), (28,9,1,3), (30,10,14,1),
                         (3,12,4,1), (4,12,1,2), (9,12,4,1), (10,12,1,9), (34,12,1,2), (15,13,9,1), (1,15,1,2), (6,15,4,1), (10,15,1,2), (12,15,4,1), (18,15,1,3), (24,15,10,1), (25,15,1,3), (33,15,4,1),
                         (3,18,1,3), (9,18,3,1), (16,18,1,3), (21,18,1,3), (27,18,1,3), (34,18,1,2), (3,19,11,1), (6,21,1,7), (18,21,4,1), (19,21,1,3), (25,21,1,3), (33,21,4,1),
                         (6,22,5,1), (21,22,5,1), (27,22,5,1), (7,24,1,2), (9,24,6,1), (12,24,1,6), (30,24,1,3), (12,25,2,1), (4,27,1,3), (10,27,1,3), (15,27,1,13), (30,27,9,1), (31,27,1,3),
                         (24,28,3,1), (1,30,1,3), (6,30,3,1), (7,30,1,9), (18,30,1,3), (21,30,6,1), (27,30,1,3), (33,30,4,1), (34,30,1,2), (15,31,3,1), (3,33,1,7), (12,33,3,1), (18,33,3,1), (22,33,1,6),
                         (0,36,1,19), (21,36,1,16)]
            route = [(19, 0, 4, 2), (1, 1, 8, 2), (3, 1, 2, 3), (7, 1, 5, 2), (9, 1, 2, 9), (22, 1, 5, 2), (24, 1, 2, 3), (28, 1, 2, 8), (10, 3, 7, 2), (13, 3, 3, 2), (25, 3, 3, 2), (31, 3, 21, 2), (34, 3, 9, 2), (3, 4, 2, 4), (15, 4, 2, 7), (27, 4, 2, 3),
                     (4, 7, 5, 2), (6, 7, 2, 3), (13, 7, 2, 5), (19, 7, 8, 2), (21, 7, 2, 3), (25, 7, 6, 2), (27, 7, 2, 4), (7, 9, 7, 2), (16, 9, 3, 2), (1, 10, 2, 3), (9, 10, 2, 7), (22, 10, 8, 2), (28, 10, 8, 2), (1, 12, 3, 2),
                     (4, 13, 2, 3), (10, 13, 2, 5), (16, 13, 2, 3), (24, 13, 2, 3), (33, 13, 2, 3), (4, 15, 3, 2), (13, 15, 7, 2), (16, 15, 3, 2), (34, 15, 3, 2), (1, 16, 2, 3), (7, 16, 2, 3), (10, 16, 3, 2), (18, 16, 2, 4), (25, 16, 2, 3), (1, 18, 12, 2), (7, 18, 3, 2), (19, 18, 3, 2), (25, 18, 3, 2),
                     (4, 19, 2, 3), (10, 19, 2, 3), (16, 19, 2, 3), (21, 19, 2, 3), (27, 19, 2, 3), (33, 19, 2, 3), (4, 21, 6, 2), (16, 21, 3, 2), (22, 21, 4, 2), (28, 21, 7, 2), (34, 21, 9, 2), (7, 22, 2, 9), (19, 22, 5, 2), (25, 22, 5, 2),
                     (10, 24, 3, 2), (7, 25, 5, 2), (13, 25, 3, 2), (15, 25, 2, 4), (22, 25, 2, 3), (30, 25, 2, 4), (4, 28, 2, 3), (10, 28, 2, 14), (25, 28, 3, 2), (27, 28, 2, 3), (31, 28, 2, 3), (4, 30, 3, 2), (16, 30, 4, 2), (22, 30, 3, 2), (31, 30, 6, 2),
                     (1, 31, 2, 3), (7, 31, 2, 8), (18, 31, 2, 3), (24, 31, 2, 6), (34, 31, 3, 2), (1, 33, 3, 2), (10, 33, 3, 2), (13, 33, 3, 2), (19, 33, 4, 2), (28, 33, 3, 2), (3, 34, 2, 7), (15, 34, 2, 3), (22, 34, 2, 6), (33, 34, 2, 3)]
            self.pos = [-74, 74, 0]

        builder.construct(maze, route)
        for r in range(len(route)):
            road = route[r]
            self.route.append((road[1]*w+self.pos[0], self.pos[1]-road[0]*h,road[2]*w, road[3]*h))

    def draw(self):
        glPushMatrix()
        glTranslate(self.pos[0], self.pos[1], self.pos[2])
        glCallList(builder.mazebuild)
        glPopMatrix()



